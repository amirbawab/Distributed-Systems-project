String mainClass = "rm.RM"

dependencies {
    compile project(':common:rm')
}

task runCar(type: JavaExec){
    doFirst {
        copy {
            from "${rootDir}/etc/policy/"
            into "${buildDir}"
            include 'rm.policy'
            expand('classpath': "${sourceSets.main.java.outputDir}")
        }
    }

    classpath = sourceSets.main.runtimeClasspath
    main = mainClass
    args = [rm_rmiRegistry_port, "car"]
    jvmArgs = [
            "-Djava.security.policy=${project.buildDir}/rm.policy",
            "-Djava.rmi.server.codebase=file:${sourceSets.main.java.outputDir}"
    ]
}

task runFlight(type: JavaExec){
    doFirst {
        copy {
            from "${rootDir}/etc/policy/"
            into "${buildDir}"
            include 'rm.policy'
            expand('classpath': "${sourceSets.main.java.outputDir}")
        }
    }

    classpath = sourceSets.main.runtimeClasspath
    main = mainClass
    args = [rm_rmiRegistry_port, "flight"]
    jvmArgs = [
            "-Djava.security.policy=${project.buildDir}/rm.policy",
            "-Djava.rmi.server.codebase=file:${sourceSets.main.java.outputDir}"
    ]
}

task runRoom(type: JavaExec){
    doFirst {
        copy {
            from "${rootDir}/etc/policy/"
            into "${buildDir}"
            include 'rm.policy'
            expand('classpath': "${sourceSets.main.java.outputDir}")
        }
    }

    classpath = sourceSets.main.runtimeClasspath
    main = mainClass
    args = [rm_rmiRegistry_port, "room"]
    jvmArgs = [
            "-Djava.security.policy=${project.buildDir}/rm.policy",
            "-Djava.rmi.server.codebase=file:${sourceSets.main.java.outputDir}"
    ]
}

